{
  "language": "Solidity",
  "sources": {
    "contracts/NFTCollectionRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\ncontract NFTCollectionRegistry {\n    struct CollectionInfo {\n        string name;\n        string symbol;\n        address owner;\n    }\n    address[] public allCollections;\n    mapping(address => address[]) private ownerToCollections;\n    mapping(address => CollectionInfo) private collectionMetadata;\n\n    event CollectionRegistered(address indexed collection, address indexed owner, string name, string symbol);\n\n    /**\n     * @dev Registers a new collection with the registry.\n     * @param collection The address of the collection contract.\n     * @param owner The address of the owner of the collection.\n     * @param name The name of the collection.\n     * @param symbol The symbol of the collection.\n     */\n    function registerCollection(address collection, address owner, string memory name, string memory symbol) external {\n        require(collection != address(0), \"Collection address cannot be zero\");\n        require(owner != address(0), \"Owner address cannot be zero\");\n        allCollections.push(collection);\n        ownerToCollections[owner].push(collection);\n        collectionMetadata[collection] = CollectionInfo({\n            name: name,\n            symbol: symbol,\n            owner: owner\n        });\n        emit CollectionRegistered(collection, owner, name, symbol);\n    }\n\n    /**\n     * @dev Returns all registered collections.\n     * @return An array of all collection addresses.\n     */\n    function getAllCollections() external view returns (address[] memory) {\n        return allCollections;\n    }\n\n    /**\n     * @dev Returns all collections owned by a specific address.\n     * @param owner The address of the owner.\n     * @return An array of collection addresses owned by the address.\n     */\n    function getCollectionsByOwner(address owner) external view returns (address[] memory) {\n        return ownerToCollections[owner];\n    }\n\n    /**\n     * @dev Returns metadata for a specific collection.\n     * @param collection The address of the collection.\n     * @return name The name of the collection.\n     * @return symbol The symbol of the collection.\n     * @return owner The owner of the collection.\n    */\n    function getCollectionMetadata(address collection) external view returns (string memory name, string memory symbol, address owner) {\n        CollectionInfo memory info = collectionMetadata[collection];\n        return (info.name, info.symbol, info.owner);\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}