{
  "address": "0x922C805C39db67ECfC117FbD7d94D9C541A9f68C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startingBid",
          "type": "uint256"
        }
      ],
      "name": "AuctionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AuctionSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BidPlaced",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "auctions",
      "outputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "highestBidder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "highestBid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "settled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startingBid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "createAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pendingWithdrawals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "placeBid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "settleAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa79cc1df96b704e1bc3a6f8b8c121864d92dede3dbba210cdb231c752d983110",
  "receipt": {
    "to": null,
    "from": "0xaA0ef66Ee5A61C363605C4030Be377e5643e9d8D",
    "contractAddress": "0x922C805C39db67ECfC117FbD7d94D9C541A9f68C",
    "transactionIndex": 0,
    "gasUsed": "764586",
    "logsBloom": "0x
    "blockHash": "0x5eb79cf3a08de1f0f8a604277f80859919ed6c122291c1a4ac929387d86348ca",
    "transactionHash": "0xa79cc1df96b704e1bc3a6f8b8c121864d92dede3dbba210cdb231c752d983110",
    "logs": [],
    "blockNumber": 7199295,
    "cumulativeGasUsed": "764586",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xaA0ef66Ee5A61C363605C4030Be377e5643e9d8D",
    250
  ],
  "numDeployments": 1,
  "solcInputHash": "8dabac4b5a2fa2015e803c1817a1abf2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startingBid\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AuctionSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"settleAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTAuction.sol\":\"NFTAuction\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/NFTAuction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ncontract NFTAuction is ReentrancyGuard {\\n    struct Auction {\\n        address seller;\\n        address highestBidder;\\n        uint256 highestBid;\\n        uint256 endTime;\\n        bool settled;\\n    }\\n\\n    mapping(address => mapping(uint256 => Auction)) public auctions;\\n    mapping(address => uint256) public pendingWithdrawals;\\n    address public feeRecipient;\\n    uint256 public feePercent;\\n\\n    event AuctionCreated(address indexed nftContract, uint256 indexed tokenId, uint256 endTime, uint256 startingBid);\\n    event BidPlaced(address indexed nftContract, uint256 indexed tokenId, address bidder, uint256 amount);\\n    event AuctionSettled(address indexed nftContract, uint256 indexed tokenId, address winner, uint256 amount);\\n\\n    constructor(address _feeRecipient, uint256 _feePercent) {\\n        feeRecipient = _feeRecipient;\\n        feePercent = _feePercent;\\n    }\\n\\n    function createAuction(\\n        address nftContract,\\n        uint256 tokenId,\\n        uint256 startingBid,\\n        uint256 duration\\n    ) external {\\n        require(auctions[nftContract][tokenId].endTime == 0, \\\"Auction already exists\\\");\\n        require(duration > 0, \\\"Duration must be greater than zero\\\");\\n        IERC721 nft = IERC721(nftContract);\\n        require(nft.ownerOf(tokenId) == msg.sender, \\\"Not the NFT owner\\\");\\n\\n        nft.transferFrom(msg.sender, address(this), tokenId);\\n\\n        uint256 endTime = block.timestamp + duration;\\n        auctions[nftContract][tokenId] = Auction({\\n            seller: msg.sender,\\n            highestBidder: address(0),\\n            highestBid: startingBid,\\n            endTime: endTime,\\n            settled: false\\n        });\\n\\n        emit AuctionCreated(nftContract, tokenId, endTime, startingBid);\\n    }\\n\\n    function placeBid(address nftContract, uint256 tokenId) external payable nonReentrant {\\n        Auction storage auction = auctions[nftContract][tokenId];\\n        require(block.timestamp < auction.endTime, \\\"Auction ended\\\");\\n        require(msg.value > auction.highestBid, \\\"Bid too low\\\");\\n\\n        if (auction.highestBid > 0) {\\n            pendingWithdrawals[auction.highestBidder] += auction.highestBid;\\n        }\\n\\n        auction.highestBid = msg.value;\\n        auction.highestBidder = msg.sender;\\n\\n        emit BidPlaced(nftContract, tokenId, msg.sender, msg.value);\\n    }\\n\\n    function withdraw() external {\\n        uint256 amount = pendingWithdrawals[msg.sender];\\n        require(amount > 0, \\\"No funds to withdraw\\\");\\n\\n        pendingWithdrawals[msg.sender] = 0;\\n        payable(msg.sender).transfer(amount);\\n    }\\n\\n    function settleAuction(address nftContract, uint256 tokenId) external nonReentrant {\\n        Auction storage auction = auctions[nftContract][tokenId];\\n        require(block.timestamp >= auction.endTime, \\\"Auction not ended\\\");\\n        require(!auction.settled, \\\"Auction already settled\\\");\\n\\n        auction.settled = true;\\n\\n        if (auction.highestBid > 0) {\\n            uint256 fee = (auction.highestBid * feePercent) / 10000;\\n            uint256 sellerProceeds = auction.highestBid - fee;\\n\\n            pendingWithdrawals[feeRecipient] += fee;\\n            pendingWithdrawals[auction.seller] += sellerProceeds;\\n\\n            IERC721(nftContract).transferFrom(address(this), auction.highestBidder, tokenId);\\n        } else {\\n            IERC721(nftContract).transferFrom(address(this), auction.seller, tokenId);\\n        }\\n\\n        emit AuctionSettled(nftContract, tokenId, auction.highestBidder, auction.highestBid);\\n    }\\n}\\n\",\"keccak256\":\"0x0963f4a02e15cae959ef8292d596299aa9e0f9a319dcea9e7f5ab874dafe468c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610c44380380610c4483398101604081905261002f9161005d565b6001600055600380546001600160a01b0319166001600160a01b039390931692909217909155600455610097565b6000806040838503121561007057600080fd5b82516001600160a01b038116811461008757600080fd5b6020939093015192949293505050565b610b9e806100a66000396000f3fe60806040526004361061007b5760003560e01c806361beb1d71161004e57806361beb1d71461018b5780637fd6f15c146101ab578063d98b9bb5146101cf578063f3f43703146101e257600080fd5b80633ccfd60b1461008057806344f91c1e1461009757806346904840146101335780635138b08c1461016b575b600080fd5b34801561008c57600080fd5b5061009561020f565b005b3480156100a357600080fd5b506100f96100b2366004610a45565b60016020818152600093845260408085209091529183529120805491810154600282015460038301546004909301546001600160a01b039485169490921692909160ff1685565b604080516001600160a01b0396871681529590941660208601529284019190915260608301521515608082015260a0015b60405180910390f35b34801561013f57600080fd5b50600354610153906001600160a01b031681565b6040516001600160a01b03909116815260200161012a565b34801561017757600080fd5b50610095610186366004610a45565b6102a7565b34801561019757600080fd5b506100956101a6366004610a71565b61055f565b3480156101b757600080fd5b506101c160045481565b60405190815260200161012a565b6100956101dd366004610a45565b6108ad565b3480156101ee57600080fd5b506101c16101fd366004610aac565b60026020526000908152604090205481565b33600090815260026020526040902054806102685760405162461bcd60e51b81526020600482015260146024820152734e6f2066756e647320746f20776974686472617760601b60448201526064015b60405180910390fd5b336000818152600260205260408082208290555183156108fc0291849190818181858888f193505050501580156102a3573d6000803e3d6000fd5b5050565b6102af610a03565b6001600160a01b03821660009081526001602090815260408083208484529091529020600381015442101561031a5760405162461bcd60e51b8152602060048201526011602482015270105d58dd1a5bdb881b9bdd08195b991959607a1b604482015260640161025f565b600481015460ff161561036f5760405162461bcd60e51b815260206004820152601760248201527f41756374696f6e20616c726561647920736574746c6564000000000000000000604482015260640161025f565b60048101805460ff19166001179055600281015415610494576000612710600454836002015461039f9190610ae6565b6103a99190610b03565b905060008183600201546103bd9190610b25565b6003546001600160a01b03166000908152600260205260408120805492935084929091906103ec908490610b38565b909155505082546001600160a01b03166000908152600260205260408120805483929061041a908490610b38565b909155505060018301546040516323b872dd60e01b81523060048201526001600160a01b03918216602482015260448101869052908616906323b872dd90606401600060405180830381600087803b15801561047557600080fd5b505af1158015610489573d6000803e3d6000fd5b505050505050610500565b80546040516323b872dd60e01b81523060048201526001600160a01b03918216602482015260448101849052908416906323b872dd90606401600060405180830381600087803b1580156104e757600080fd5b505af11580156104fb573d6000803e3d6000fd5b505050505b60018101546002820154604080516001600160a01b039384168152602081019290925284928616917f9af6d97b361e7a9fb2831b01b64c355a9e8ccde63002f427e48a9ac03c6a19a291015b60405180910390a3506102a36001600055565b6001600160a01b0384166000908152600160209081526040808320868452909152902060030154156105cc5760405162461bcd60e51b815260206004820152601660248201527541756374696f6e20616c72656164792065786973747360501b604482015260640161025f565b600081116106275760405162461bcd60e51b815260206004820152602260248201527f4475726174696f6e206d7573742062652067726561746572207468616e207a65604482015261726f60f01b606482015260840161025f565b6040516331a9108f60e11b815260048101849052849033906001600160a01b03831690636352211e90602401602060405180830381865afa158015610670573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106949190610b4b565b6001600160a01b0316146106de5760405162461bcd60e51b81526020600482015260116024820152702737ba103a34329027232a1037bbb732b960791b604482015260640161025f565b6040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b038216906323b872dd90606401600060405180830381600087803b15801561072c57600080fd5b505af1158015610740573d6000803e3d6000fd5b50505050600082426107529190610b38565b90506040518060a00160405280336001600160a01b0316815260200160006001600160a01b031681526020018581526020018281526020016000151581525060016000886001600160a01b03166001600160a01b03168152602001908152602001600020600087815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550604082015181600201556060820151816003015560808201518160040160006101000a81548160ff02191690831515021790555090505084866001600160a01b03167fbfc2001685f147773956c30c745f1b33e40df1ad4c1084b4d39c7c41bb7f6685838760405161089d929190918252602082015260400190565b60405180910390a3505050505050565b6108b5610a03565b6001600160a01b038216600090815260016020908152604080832084845290915290206003810154421061091b5760405162461bcd60e51b815260206004820152600d60248201526c105d58dd1a5bdb88195b991959609a1b604482015260640161025f565b8060020154341161095c5760405162461bcd60e51b815260206004820152600b60248201526a42696420746f6f206c6f7760a81b604482015260640161025f565b6002810154156109a05760028082015460018301546001600160a01b031660009081526020929092526040822080549192909161099a908490610b38565b90915550505b34600282018190556001820180546001600160a01b0319163390811790915560408051918252602082019290925283916001600160a01b038616917f0158f5674dc243762459b88cfc91b10d2d1ef9d40821cca978c2b680aa444682910161054c565b600260005403610a2657604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6001600160a01b0381168114610a4257600080fd5b50565b60008060408385031215610a5857600080fd5b8235610a6381610a2d565b946020939093013593505050565b60008060008060808587031215610a8757600080fd5b8435610a9281610a2d565b966020860135965060408601359560600135945092505050565b600060208284031215610abe57600080fd5b8135610ac981610a2d565b9392505050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610afd57610afd610ad0565b92915050565b600082610b2057634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115610afd57610afd610ad0565b80820180821115610afd57610afd610ad0565b600060208284031215610b5d57600080fd5b8151610ac981610a2d56fea26469706673582212203cceee6e8f8fbf845b7142237e8cf4f39e3f3d440b9f778595d11a608420395f64736f6c63430008140033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c806361beb1d71161004e57806361beb1d71461018b5780637fd6f15c146101ab578063d98b9bb5146101cf578063f3f43703146101e257600080fd5b80633ccfd60b1461008057806344f91c1e1461009757806346904840146101335780635138b08c1461016b575b600080fd5b34801561008c57600080fd5b5061009561020f565b005b3480156100a357600080fd5b506100f96100b2366004610a45565b60016020818152600093845260408085209091529183529120805491810154600282015460038301546004909301546001600160a01b039485169490921692909160ff1685565b604080516001600160a01b0396871681529590941660208601529284019190915260608301521515608082015260a0015b60405180910390f35b34801561013f57600080fd5b50600354610153906001600160a01b031681565b6040516001600160a01b03909116815260200161012a565b34801561017757600080fd5b50610095610186366004610a45565b6102a7565b34801561019757600080fd5b506100956101a6366004610a71565b61055f565b3480156101b757600080fd5b506101c160045481565b60405190815260200161012a565b6100956101dd366004610a45565b6108ad565b3480156101ee57600080fd5b506101c16101fd366004610aac565b60026020526000908152604090205481565b33600090815260026020526040902054806102685760405162461bcd60e51b81526020600482015260146024820152734e6f2066756e647320746f20776974686472617760601b60448201526064015b60405180910390fd5b336000818152600260205260408082208290555183156108fc0291849190818181858888f193505050501580156102a3573d6000803e3d6000fd5b5050565b6102af610a03565b6001600160a01b03821660009081526001602090815260408083208484529091529020600381015442101561031a5760405162461bcd60e51b8152602060048201526011602482015270105d58dd1a5bdb881b9bdd08195b991959607a1b604482015260640161025f565b600481015460ff161561036f5760405162461bcd60e51b815260206004820152601760248201527f41756374696f6e20616c726561647920736574746c6564000000000000000000604482015260640161025f565b60048101805460ff19166001179055600281015415610494576000612710600454836002015461039f9190610ae6565b6103a99190610b03565b905060008183600201546103bd9190610b25565b6003546001600160a01b03166000908152600260205260408120805492935084929091906103ec908490610b38565b909155505082546001600160a01b03166000908152600260205260408120805483929061041a908490610b38565b909155505060018301546040516323b872dd60e01b81523060048201526001600160a01b03918216602482015260448101869052908616906323b872dd90606401600060405180830381600087803b15801561047557600080fd5b505af1158015610489573d6000803e3d6000fd5b505050505050610500565b80546040516323b872dd60e01b81523060048201526001600160a01b03918216602482015260448101849052908416906323b872dd90606401600060405180830381600087803b1580156104e757600080fd5b505af11580156104fb573d6000803e3d6000fd5b505050505b60018101546002820154604080516001600160a01b039384168152602081019290925284928616917f9af6d97b361e7a9fb2831b01b64c355a9e8ccde63002f427e48a9ac03c6a19a291015b60405180910390a3506102a36001600055565b6001600160a01b0384166000908152600160209081526040808320868452909152902060030154156105cc5760405162461bcd60e51b815260206004820152601660248201527541756374696f6e20616c72656164792065786973747360501b604482015260640161025f565b600081116106275760405162461bcd60e51b815260206004820152602260248201527f4475726174696f6e206d7573742062652067726561746572207468616e207a65604482015261726f60f01b606482015260840161025f565b6040516331a9108f60e11b815260048101849052849033906001600160a01b03831690636352211e90602401602060405180830381865afa158015610670573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106949190610b4b565b6001600160a01b0316146106de5760405162461bcd60e51b81526020600482015260116024820152702737ba103a34329027232a1037bbb732b960791b604482015260640161025f565b6040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b038216906323b872dd90606401600060405180830381600087803b15801561072c57600080fd5b505af1158015610740573d6000803e3d6000fd5b50505050600082426107529190610b38565b90506040518060a00160405280336001600160a01b0316815260200160006001600160a01b031681526020018581526020018281526020016000151581525060016000886001600160a01b03166001600160a01b03168152602001908152602001600020600087815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550604082015181600201556060820151816003015560808201518160040160006101000a81548160ff02191690831515021790555090505084866001600160a01b03167fbfc2001685f147773956c30c745f1b33e40df1ad4c1084b4d39c7c41bb7f6685838760405161089d929190918252602082015260400190565b60405180910390a3505050505050565b6108b5610a03565b6001600160a01b038216600090815260016020908152604080832084845290915290206003810154421061091b5760405162461bcd60e51b815260206004820152600d60248201526c105d58dd1a5bdb88195b991959609a1b604482015260640161025f565b8060020154341161095c5760405162461bcd60e51b815260206004820152600b60248201526a42696420746f6f206c6f7760a81b604482015260640161025f565b6002810154156109a05760028082015460018301546001600160a01b031660009081526020929092526040822080549192909161099a908490610b38565b90915550505b34600282018190556001820180546001600160a01b0319163390811790915560408051918252602082019290925283916001600160a01b038616917f0158f5674dc243762459b88cfc91b10d2d1ef9d40821cca978c2b680aa444682910161054c565b600260005403610a2657604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6001600160a01b0381168114610a4257600080fd5b50565b60008060408385031215610a5857600080fd5b8235610a6381610a2d565b946020939093013593505050565b60008060008060808587031215610a8757600080fd5b8435610a9281610a2d565b966020860135965060408601359560600135945092505050565b600060208284031215610abe57600080fd5b8135610ac981610a2d565b9392505050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610afd57610afd610ad0565b92915050565b600082610b2057634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115610afd57610afd610ad0565b80820180821115610afd57610afd610ad0565b600060208284031215610b5d57600080fd5b8151610ac981610a2d56fea26469706673582212203cceee6e8f8fbf845b7142237e8cf4f39e3f3d440b9f778595d11a608420395f64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1584,
        "contract": "contracts/NFTAuction.sol:NFTAuction",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 5537,
        "contract": "contracts/NFTAuction.sol:NFTAuction",
        "label": "auctions",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)5530_storage))"
      },
      {
        "astId": 5541,
        "contract": "contracts/NFTAuction.sol:NFTAuction",
        "label": "pendingWithdrawals",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5543,
        "contract": "contracts/NFTAuction.sol:NFTAuction",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 5545,
        "contract": "contracts/NFTAuction.sol:NFTAuction",
        "label": "feePercent",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Auction)5530_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct NFTAuction.Auction))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Auction)5530_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Auction)5530_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NFTAuction.Auction)",
        "numberOfBytes": "32",
        "value": "t_struct(Auction)5530_storage"
      },
      "t_struct(Auction)5530_storage": {
        "encoding": "inplace",
        "label": "struct NFTAuction.Auction",
        "members": [
          {
            "astId": 5521,
            "contract": "contracts/NFTAuction.sol:NFTAuction",
            "label": "seller",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5523,
            "contract": "contracts/NFTAuction.sol:NFTAuction",
            "label": "highestBidder",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5525,
            "contract": "contracts/NFTAuction.sol:NFTAuction",
            "label": "highestBid",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5527,
            "contract": "contracts/NFTAuction.sol:NFTAuction",
            "label": "endTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5529,
            "contract": "contracts/NFTAuction.sol:NFTAuction",
            "label": "settled",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}